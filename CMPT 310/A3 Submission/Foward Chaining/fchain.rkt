#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 641 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";(define filename \"input.rkt\")"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";Test Case: ((q (p)) (p (l"
0 0 17 3 6 #" m)) ("
0 0 17 3 6 #"m (b l"
0 0 17 3 4 #")) ("
0 0 17 3 1 #"l"
0 0 17 3 2 #" ("
0 0 17 3 2 #"a "
0 0 17 3 6 #"p)) (l"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 2 #" b"
0 0 17 3 11 #")) (a) (b))"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";Test Case (Given): ((p) (q (p)) (r (q"
0 0 17 3 4 #" s t"
0 0 17 3 14 #")) (s (p u)) ("
0 0 17 3 1 #"r"
0 0 17 3 3 #" (q"
0 0 17 3 6 #" h)) ("
0 0 17 3 1 #"t"
0 0 17 3 3 #") ("
0 0 17 3 1 #"h"
0 0 17 3 2 #" ("
0 0 17 3 1 #"t"
0 0 17 3 4 #")) ("
0 0 17 3 1 #"u"
0 0 17 3 6 #" (v)))"
0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";Test Case: ((a) (b) (p (a b c d e)) (q (c e)) (c (a b)) (r (a b d))"
 #" (d))"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"fchain"
0 0 22 3 1 #" "
0 0 14 3 8 #"filename"
0 0 22 3 2 #") "
0 0 17 3 51 #";testfile needs to be in same location as this file"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"rules"
0 0 22 3 2 #" ("
0 0 14 3 10 #"file->list"
0 0 22 3 1 #" "
0 0 14 3 8 #"filename"
0 0 22 3 2 #"))"
0 0 17 3 23 #"; convert rules to list"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 22 #";(display (car rules))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"cset"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"fchainRec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"rules"
0 0 22 3 3 #") ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"rules"
0 0 22 3 2 #") "
0 0 14 3 4 #"cset"
0 0 22 3 1 #" "
0 0 14 3 4 #"cset"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 7          55 4           0 0           0 8 0 22 3 2 #"  "
0 0 17 3 41 #"; Parameters: list1, list2, flist, flist2"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 57 #";list2 keeps track of orginal list when looping is needed"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 110
(
 #";flist2 checks to see if flist was updated at the end of the current"
 #" loop (if not then no more choices remain)"
) 0           0 0 0 22 29 1 #"\n"
0 0 22 3 2 #" )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"fchainRec"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #" "
0 0 14 3 6 #"flist2"
0 0 22 3 1 #")"
0 0 17 3 20 #"; Recursive function"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"flength"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 22 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 22 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 4 #"))))"
0 0 17 3 103
(
 #"; the size of the correct solution set: flatten list, then remove du"
 #"plicates and count the final length"
) 0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 17 3 21 #"; reached end of list"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"            ( ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                 (("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 6 #"flist2"
0 0 22 3 3 #") ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 5 #")) (("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 25 #"\"\\nFinal Conclusion Set:\""
0 0 22 3 2 #")("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 56 #"                                                     ( ("
0 0 14 3 1 #"="
0 0 22 3 2 #"  "
0 0 14 3 7 #"flength"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"\\nSuccess! Solution Found!\""
0 0 22 3 4 #"))  "
0 0 17 3 35 #"; checks if the answer is comeplete"
0 0 22 29 1 #"\n"
0 0 22 3 54 #"                                                     ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 24 #"\\nFailure! No Solution.\""
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 52 #"                                                   ("
0 0 14 3 4 #"exit"
0 0 22 3 3 #")))"
0 0 17 3 50 #";question completed with either success or failure"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 6 #"flist2"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #")"
0 0 17 3 82
(
 #"; set flist2 to the current flist, will help see if any new atoms ha"
 #"ve been added!"
) 0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 9 #"fchainRec"
0 0 22 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 3 #")))"
0 0 17 3 64
#"; if choices still remain loop back and go through rules again  "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                   ) )"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            )"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 4 #") ( "
0 0 17 3 10 #";For Facts"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 4 #"getp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 3 #")) "
0 0 14 3 5 #"flist"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 6 #"flist2"
0 0 17 3 7 #" flist)"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 2 #" ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"\\nRule"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"fact"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"so"
0 0 19 3 1 #" "
0 0 19 3 3 #"add"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 17 #"Conclusion Set: \""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               )"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 9 #"fchainRec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 2 #") "
0 0 14 3 5 #"list2"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #" "
0 0 14 3 6 #"flist2"
0 0 22 3 2 #"))"
0 0 17 3 28 #"; recurse with the next rule"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     )"
0 0 17 3 41 #"; if the rule is a fact add to final list"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 4 #"getp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 3 #")) "
0 0 14 3 5 #"flist"
0 0 22 3 3 #")) "
0 0 17 3 37 #"; checks if head is in Conclusion set"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 6 #"flist2"
0 0 17 3 7 #" flist)"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 2 #" ("
0 0 14 3 10 #"FlistCheck"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 3 #")) "
0 0 17 3 19 #";check rest of body"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 17 3 16 #";(display flist)"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               )"
0 0 17 3 40 #"; if head(rule) is not in Conclusion Set"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 9 #"fchainRec"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 2 #") "
0 0 14 3 5 #"list2"
0 0 22 3 1 #" "
0 0 14 3 5 #"flist"
0 0 22 3 1 #" "
0 0 14 3 6 #"flist2"
0 0 22 3 3 #") )"
0 0 17 3 28 #"; recurse with the next rule"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   )"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" )"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 7          31 4           0 0           0 4 0 17 3 132
(
 #";;NOTE --- END LOOP: WHEN YOU REACH THE END OF THE SET OF RULES. CHE"
 #"CK (LOOK FORWARD) TO THE NEXT RUN THROUGH OF THE LIST TO SEE IF "
) 0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 17 3 52 #"; NEW ATOMS ARE ADDED TO THE LIST, IF NOT THEN DONE."
0           0 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"getp"
0 0 22 3 1 #" "
0 0 14 3 4 #"prop"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #") "
0 0 17 3 61
#";used to check through set of Conclusions (from Assignment 1)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 4 #"prop"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 17 3 2 #"; "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")) "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 17 3 2 #"; "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"getp"
0 0 22 3 1 #" "
0 0 14 3 4 #"prop"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 4 #"))))"
0 0 17 3 2 #"; "
0 0 22 29 1 #"\n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"FlistCheck"
0 0 22 3 1 #" "
0 0 14 3 9 #"FinalList"
0 0 22 3 1 #" "
0 0 14 3 3 #"lis"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"check"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"blength"
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lis"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 18 #";(display blength)"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 32 #";(display (car (cdr (car lis))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 7 #"blength"
0 0 22 3 4 #")]) "
0 0 17 3 38 #"; FOR each i in body, is it in flist? "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 45 #";(display (list-ref (car (cdr (car lis))) i))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 4 #"when"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 4 #"getp"
0 0 22 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lis"
0 0 22 3 4 #"))) "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 9 #"FinalList"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"check"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 17 3 54 #";if element of body is not in Conclusion Set then flag"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             )"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   )"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 5 #"check"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"printf"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"\\nBody"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 2 #"CS"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 4 #"head"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #","
0 0 19 3 7 #" add: \""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"    )  "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 5 #"check"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 7 #"display"
0 0 22 3 2 #" ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 14 3 9 #"FinalList"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lis"
0 0 22 3 7 #"))))) ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 14 3 9 #"FinalList"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lis"
0 0 22 3 6 #"))))))"
0 0 17 3 59
#"; add to CS because head is not in and each Body element is"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 9 #"FinalList"
0 0 22 3 1 #")"
0 0 17 3 17 #"; change nothing."
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      )"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                    "
0           0
